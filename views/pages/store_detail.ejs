<!DOCTYPE html>
<html lang="en">
<head>

  <%- include('../layouts/head', { title: `StoreDetail | Nom Nom` }) %>
  <style>
    #nav span {
      display: inline-block;
      width: 40px;
      height: 40px;
      line-height: 40px;
      margin: 0 5px;
      text-align: center;
      border-radius: 50%;
      background-color: #e0e0e0;
      cursor: pointer;
      font-size: 1.5rem;
      transition: background-color 0.3s, color 0.3s;
    }

    #nav span.active {
      background-color: #6a0dad;
      color: #fff;
      font-size: 2rem;
    }
  </style>

</head>
<body class="g-sidenav-show bg-gray-100">
  <div class="position-absolute w-100 min-height-300 top-0" style="background-image: url('https://raw.githubusercontent.com/creativetimofficial/public-assets/master/argon-dashboard-pro/assets/img/profile-layout-header.jpg'); background-position-y: 50%;">
    <span class="mask bg-primary opacity-6"></span>
  </div>
  
  <%- include('../partials/sidebar') %>
  
  <div class="main-content position-relative max-height-vh-100 h-100">
    <%- include('../partials/navbar') %>
    <% if (store) { %>
      <div class="card shadow-lg mx-4 card-profile-bottom">
            <div class="card-body p-3">
              <div class="row gx-4">
                <div class="col-auto">
                  <div class="avatar avatar-xl position-relative">
                    <img src="/images/store.png" alt="profile_image" class="w-100 border-radius-lg shadow-sm">
                  </div>
                </div>
                <div class="col-auto my-auto">
                  <div class="h-100">
                    <h5 class="mb-1">
                      <%= store.name %>
                    </h5>
                    <p class="mb-0 font-weight-bold text-sm">
                      <%= store.address %>
                    </p>
                  </div>
                </div>                
              </div>
            </div>
      </div>   
    <% } %>
        
    <div class="container-fluid py-4">
      <div class="row">

        <div class="col-md-8">
          <div class="card">
            <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                  <h6>Store's table</h6>
                  <a href="javascript:;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addFormModal">
                    Add <i class="ni ni-fat-add fs-7"></i>
                  </a>
            </div>
            <div class="card-body px-0 pt-0 pb-2">
              <div class="table-responsive p-0">
                <table class="table align-items-center mb-0">
                  <thead>
                    <tr>
                      <th class="col-3 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-7">Name</th>
                      <th class="col-1 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Description</th>
                      <th class="col-1 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Price</th>
                      <th id="campusHeader" class="col-1 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">
                        <div class="dropdown">
                          <button class="btn btn-secondary dropdown-toggle" type="button" id="campusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            Category
                          </button>
                          <ul class="dropdown-menu" aria-labelledby="campusDropdown">
                            <li><a class="dropdown-item active" href="#" onclick="toggleFoodCate(null); return false;">All</a></li>
                            <li><a class="dropdown-item" href="#" onclick="toggleFoodCate(1); return false;">Cate 1</a></li>
                            <li><a class="dropdown-item" href="#" onclick="toggleFoodCate(2); return false;">Cate 2</a></li>
                            <li><a class="dropdown-item" href="#" onclick="toggleFoodCate(3); return false;">Cate 3</a></li>
                          </ul>
                        </div>
                      </th>
                      <th class="col-2 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10" style="padding: 12px;">Status</th>
                      <!-- <th id="statusHeader" class="col-1 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">
                        <div class="dropdown">
                          <button class="btn btn-secondary dropdown-toggle" type="button" id="statusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                            Status
                          </button>
                          <ul class="dropdown-menu" aria-labelledby="statusDropdown">
                            <li><a class="dropdown-item active" href="#" onclick="toggleStoreStatus(null); return false;">All</a></li>
                            <li><a class="dropdown-item" href="#" onclick="toggleStoreStatus(1); return false;">Active</a></li>
                            <li><a class="dropdown-item" href="#" onclick="toggleStoreStatus(2); return false;">Inactive</a></li>
                          </ul>
                        </div>
                      </th> -->
                      <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">CreatedDate</th>
                      <th class="col-1 text-secondary opacity-7"></th>
                    </tr>
                  </thead>
                  <tbody id="foodTableBody">
                    <% products.forEach(product => { %>
                      <tr>                            
                        <td>
                          <div class="d-flex px-2 py-1">
                            <div>
                              <img src="<%= product.image %>" class="avatar me-3" alt="stores">
                            </div>
                            <div class="d-flex flex-column justify-content-center">
                              <h6 class="mb-0 text-sm"><%= product.title %></h6>
                              <p class="text-xs text-secondary mb-0"><%= product.name %></p>
                            </div>
                          </div>
                        </td>
                        <td>
                          <p class="text-xs font-weight-bold mb-0" style="overflow: hidden;"><%= product.description %></p>
                        </td>
                        <td>
                          <p class="text-sm font-weight-bold mb-0"><%= product.price %></p>
                        </td>
                        <td>
                          <p class="text-sm text-center font-weight-bold mb-0"><%= product.cate %></p>
                        </td>
                        <td class="align-middle text-center text-sm ">
                          <span class="badge badge-sm bg-gradient-<%= product.status === 1 ? 'success' : 'danger' %>">
                            <%= product.status === 1 ? 'Active' : 'Inactive' %>
                          </span>
                        </td>
                        <td class="align-middle">
                          <span class="text-secondary text-xs font-weight-bold ps-0">
                            <%
                              var date = product.createdDate.split('T')[0];
                              var parts = date.split('-');
                              var formattedDate = parts[2] + '-' + parts[1] + '-' + parts[0];
                            %>
                            <%= formattedDate %>
                          </span>
                        </td>
                        <td class="align-middle">
                          <a href="javascript:;" class="text-secondary font-weight-bold text-xs" data-bs-toggle="modal" data-bs-target="#editFoodModal" onclick="foodModal('<%= product.foodId %>', '<%= product.title %>', '<%= product.description %>', '<%= product.price %>', '<%= product.cate %>')">
                            Edit
                          </a>
                        </td>
                      </tr>
                    <% }) %>
                  </tbody>                      
                </table>
                <div id="nav" class="d-flex justify-content-center mt-3"></div>
              </div>
            </div>
          </div>
        </div>

        <div class="col-md-4">
          <div class="card card-profile">
            <img src="/images/store_bg.png" alt="Image placeholder" class="card-img-top">
            <div class="row justify-content-center">
              <div class="col-4 col-lg-4 order-lg-2">
                <div class="mt-n4 mt-lg-n6 mb-4 mb-lg-0">
                  <a href="javascript:;">
                    <img src="/images/store.png" class="rounded-circle img-fluid border border-2 border-white">
                  </a>
                </div>
              </div>
            </div>
            <div class="card-body pt-0">
              <div class="row">
                <div class="col">
                  <div class="d-flex justify-content-center">
                    <div class="d-grid text-center">
                      <span class="text-lg font-weight-bolder">22</span>
                      <span class="text-sm opacity-8">Total Foods</span>
                    </div>
                    <div class="d-grid text-center mx-4">
                      <span class="text-lg font-weight-bolder"></span>
                      <span class="text-sm opacity-8"></span>
                    </div>
                    <div class="d-grid text-center">
                      <span class="text-lg font-weight-bolder">89</span>
                      <span class="text-sm opacity-8">Total Orders</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <%- include('../layouts/footer') %>

    </div>
  </div>

  <!-- Add Store Modal -->
  <div class="modal fade" id="addFormModal" tabindex="-1" aria-labelledby="addFormModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-bottom">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addFormModalLabel">Add New Food</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addFoodForm" enctype="multipart/form-data">
            <div class="mb-3">
              <label for="foodName-add" class="form-label">Food Name</label>
              <input type="text" class="form-control" id="foodName-add" required>
            </div>
            <div class="mb-3">
              <label for="foodTitle-add" class="form-label">Title</label>
              <input type="text" class="form-control" id="foodTitle-add" required>
            </div>
            <div class="mb-3">
              <label for="foodDescription-add" class="form-label">Description</label>
              <input type="text" class="form-control" id="foodDescription-add" required>
            </div>
            <div class="mb-3">
              <label for="foodPrice-add" class="form-label">Price</label>
              <input type="text" class="form-control" id="foodPrice-add" required>
            </div>
            <div class="mb-3">
              <label for="foodCate-add" class="form-label">Category</label>
              <select class="form-select" id="foodCate-add">
                <option value="1">Cate 1</option>
                <option value="2">Cate 2</option>
                <option value="3">Cate 3</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="foodImage-add" class="form-label">Image</label>
              <input type="file" class="form-control" id="foodImage-add" accept="image/*" onchange="previewImage(event, 'imagePreview-add')">
              <img id="imagePreview-add" src="#" alt="Image Preview" style="display:none; max-width: 100%; height: 80%; padding-top: 10px;">
            </div>
          </form>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" id="saveFoodBtn" class="btn btn-primary" form="addFoodForm">Add Store</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Food Modal -->
  <div class="modal fade" id="editFoodModal" tabindex="-1" aria-labelledby="editFoodModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-bottom">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editFoodModalLabel">Edit Food</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editFoodForm" enctype="multipart/form-data">
            <div class="mb-3">
              <label for="foodId" class="form-label">Food ID</label>
              <input type="text" class="form-control" id="foodId" readonly>
            </div>
            <div class="mb-3">
              <label for="foodTitle" class="form-label">Title</label>
              <input type="text" class="form-control" id="foodTitle" required>
            </div>
            <div class="mb-3">
              <label for="foodDescription" class="form-label">Description</label>
              <input type="text" class="form-control" id="foodDescription" required>
            </div>
            <div class="mb-3">
              <label for="foodPrice" class="form-label">Price</label>
              <input type="text" class="form-control" id="foodPrice" required>
            </div>
            <div class="mb-3">
              <label for="foodCate" class="form-label">Category</label>
              <select class="form-select" id="foodCate">
                <option value="1">Cate 1</option>
                <option value="2">Cate 2</option>
                <option value="3">Cate 3</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="foodImage" class="form-label">Image</label>
              <input type="file" class="form-control" id="foodImage" accept="image/*" onchange="previewImage(event, 'imagePreview')">
              <img id="imagePreview" src="#" alt="Image Preview" style="display:none; max-width: 100%; height: 80%; padding-top: 10px;">
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" id="deleteFoodBtn">Delete</button>
          <div class="ms-auto">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" id="updateFoodBtn" class="btn btn-primary" form="editFoodForm">Save changes</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- JS Handle FUNCTION -->
  <script>
    // Preview image in modal
    function previewImage(event, previewId) {
      var input = event.target;
      var reader = new FileReader();
      reader.onload = function() {
        var dataURL = reader.result;
        var imagePreview = document.getElementById(previewId);
        imagePreview.src = dataURL;
        imagePreview.style.display = 'block';
      };
      reader.readAsDataURL(input.files[0]);
    }

    // Show data of food in update modal
    function foodModal(id, title, description,price, cate) {
      document.getElementById('foodId').value = id;
      document.getElementById('foodTitle').value = title;
      document.getElementById('foodDescription').value = description;
      document.getElementById('foodPrice').value = price;
      document.getElementById('foodCate').value = cate;
    }

    function getStoreIdFromUrl() {
      const pathSegments = window.location.pathname.split('/');
      return pathSegments[pathSegments.length - 1];
    }

    const filterState = {
      cate: null
    };

    const nav = document.getElementById('nav');
    const tbodyFood = document.getElementById('foodTableBody');
    let pageIndex = 0;
    let itemsPerPage = 16;

    function toggleFoodCate(cate) {
      console.log('Toggling status filter:', cate);
      filterState.cate = cate;
      fetchFoods(filterState);
    }

    async function fetchFoods(filters = {}) {
      const storeId = getStoreIdFromUrl();

      const validFilters = Object.fromEntries(
        Object.entries(filters).filter(([key, value]) => value !== undefined && value !== null)
      );

      const queryParams = new URLSearchParams(validFilters).toString();

      try {
        const response = await fetch(`/food?storeId=${storeId}&${queryParams}`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.text();
        tbodyFood.innerHTML = '';

        const parser = new DOMParser();
        const doc = parser.parseFromString(data, 'text/html');

        const newTbody = doc.getElementById('foodTableBody');
        if (newTbody) {
          const foods = Array.from(newTbody.childNodes);

          foods.slice(pageIndex * itemsPerPage, (pageIndex * itemsPerPage) + itemsPerPage).forEach(food => {
            tbodyFood.appendChild(food);
          });

          loadPageFood(foods, nav);
        } else {
          console.error('New tbody not found in fetched data');
        }
      } catch (error) {
        console.error('Error fetching foods:', error);
      }
    }

    function loadPageFood(foods, nav) {
      nav.innerHTML = "";
      const totalItems = foods.length;
      const totalPages = Math.ceil(totalItems / itemsPerPage);

      for (let i = 0; i < totalPages; i++) {
        const span = document.createElement('span');
        span.innerHTML = i + 1;
        span.addEventListener('click', (e) => {
          pageIndex = parseInt(e.target.innerHTML, 10) - 1;
          fetchFoods(filterState);
          updateActivePage(nav, pageIndex);
        });
        if (i === pageIndex) {
          span.classList.add('active');
        }
        nav.append(span);
      }
    }

    function updateActivePage(nav, pageIndex) {
      const spans = nav.querySelectorAll('span');
      spans.forEach((span, index) => {
        if (index === pageIndex) {
          span.classList.add('active');
        } else {
          span.classList.remove('active');
        }
      });
    }

    document.addEventListener("DOMContentLoaded", function() {
      fetchFoods();

      // Add foods
      document.getElementById('addFoodForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const storeId = getStoreIdFromUrl();
    const foodName = document.getElementById('foodName-add').value;
    const foodTitle = document.getElementById('foodTitle-add').value;
    const foodDescription = document.getElementById('foodDescription-add').value;
    const foodPrice = document.getElementById('foodPrice-add').value;
    const foodCate = document.getElementById('foodCate-add').value;
    const foodImage = document.getElementById('foodImage-add').files[0];

    if (!foodName || !foodTitle || !foodDescription || !foodPrice || !foodCate || !foodImage) {
        alert('Please fill in all required fields.');
        return;
    }

    const formData = new FormData();
    formData.append('Name', foodName);
    formData.append('Title', foodTitle);
    formData.append('Description', foodDescription);
    formData.append('Price', foodPrice);
    formData.append('Cate', parseInt(foodCate, 10));
    formData.append('Image', foodImage);

    try {
        console.log("Form Data:", formData);
        const response = await fetch(`/food/addFood?storeId=${storeId}`, {
            method: 'POST',
            body: formData,
        });

        if (response.ok) {
            const addResult = await response.json();
            if (addResult.isSuccess) {
                alert('Food added successfully!');
                location.reload();
            } else {
                alert('Failed to added food: ' + (addResult.data ? addResult.data.message : addResult.error));
            }
        } else {
            const errorData = await response.json();
            console.error('Error data:', errorData);
            alert('Failed to connect to the server. Please try again later.');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred: ' + error.message);
    }
});

      // Update foods
      document.getElementById('updateFoodBtn').addEventListener('click', async function(event) {
        event.preventDefault();

        const foodId = document.getElementById('foodId').value;
        const foodTitle = document.getElementById('foodTitle').value;
        const foodDescription = document.getElementById('foodDescription').value;
        const foodPrice = document.getElementById('foodPrice').value;
        const foodCate = document.getElementById('foodCate').value;
        const foodImage = document.getElementById('foodImage').files[0];

        if (!foodTitle || !foodDescription || !foodPrice || !foodCate || !foodImage) {
          alert('Please fill in all required fields.');
          return;
        }

        const formData = new FormData();
        formData.append('Title', foodTitle);
        formData.append('Description', foodDescription);
        formData.append('Price', foodPrice);
        formData.append('Cate', parseInt(foodCate, 10));
        formData.append('Image', foodImage);

        try {
          const response = await fetch(`/food/updateFood?foodId=${foodId}`, {
            method: 'PUT',
            body: formData,
          });

          if (response.ok) {
            const updateResult = await response.json();
            if (updateResult.isSuccess) {
              alert('Food updated successfully!');
              location.reload();
            } else {
              alert('Failed to update food: ' + (updateResult.data ? updateResult.data.message : updateResult.error));
            }
          } else {
            const errorData = await response.json();
            console.error('Error data:', errorData);
            alert('Failed to connect to the server. Please try again later.');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred: ' + error.message);
        }
      });

      // Delete foods
      document.getElementById('deleteFoodBtn').addEventListener('click', async function () {
        const foodId = document.getElementById('foodId').value;

        const response = await fetch('/food/deleteFood', {
          method: 'DELETE',
          headers: {
            'content-type': 'application/json'
          },
          body: JSON.stringify({
            foodId: foodId
          })
        });

        const deleteResult = await response.json();
        if (!deleteResult.error) {
          alert("Food deleted successfully!");
          location.reload();
        } else {
          alert("Failed to delete food: " + deleteResult.error);
        }
      });
    });

  </script>

  <!--   Core JS Files   -->
  <%- include('../layouts/script') %>
</body>
</html>