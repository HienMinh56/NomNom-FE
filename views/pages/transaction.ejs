<!DOCTYPE html>
<html lang="en">
<head>
    
    <%- include('../layouts/head', { title: 'Transaction | Nom Nom' }) %>
    <style>
      #nav_transaction {
        display: flex;
        justify-content: center;
        align-items: center;
      }
      #nav_transaction .arrow {
        width: 40px;
        height: 40px;
        line-height: 40px;
        background-color: #6a0dad;
        color: #fff;
        font-size: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 5px;
        cursor: pointer;
      }
      #pageSelect_transaction {
        padding: 5px;
        font-size: 1rem;
        text-align: center;
      }
    </style>

</head>
<body class="g-sidenav-show bg-gray-100">
    <div class="min-height-300 bg-primary position-absolute w-100"></div>
      
      <%- include('../partials/sidebar') %>
  
        <main class="main-content position-relative border-radius-lg ">
  
          <%- include('../partials/navbar') %>
  
          <div class="container-fluid py-4">
            <div class="row">
              <div class="col-12">
                <div class="card mb-4">
                  <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                    <h6>Transaction's table</h6>
                  </div>
                  <div class="card-body px-0 pt-0 pb-2">
                    <div class="table-responsive p-0">
                      <div class="row ps-4 align-items-center w-100">
                        <div class="col-2">
                          <label for="usernameInput" class="form-label">User Name</label>
                          <input type="text" id="usernameInput" class="form-control" placeholder="Enter name">
                        </div>
                        <div class="col-3">
                            <label for="createdDateInput" class="form-label">Created Date</label>
                            <input type="date" id="createdDateInput" class="form-control">
                        </div>                       
                        <div class="col-2" style="margin: 45px 0 0 0 ; padding: 0;">
                          <button class="btn btn-primary w-100 " style="height: 40px;" onclick="applyFilters()">Apply Filters</button>
                        </div>
                      </div>                    
                      <table class="table align-items-center mb-0">
                        <thead>
                            <tr>
                                <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-4">Transaction</th>
                                <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Amount</th>
                                <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Type</th>
                                <th class="col-2 text-center text-secondary text-xxs font-weight-bolder opacity-10 ps-4">Status</th>
                                <th class="col-2 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">CreatedDate</th>
                                <th class="col-1 text-secondary opacity-7"></th>
                            </tr>
                        </thead>
                        <tbody id="transactionTableBody">
                            <% transactions.forEach(transaction => { %>
                                <tr>
                                    <td>
                                        <div class="d-flex px-2 py-1">
                                            <div>
                                                <img src="./images/transaction.png" class="avatar me-3" alt="stores">
                                            </div>
                                            <div class="d-flex flex-column justify-content-center">
                                                <h6 class="mb-0 text-sm"><%= transaction.transationId %></h6>
                                                <p class="text-xs text-secondary mb-0">by <%= transaction.user.userName %></p>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <p class="text-xs font-weight-bold mb-0"><%= transaction.amount %></p>
                                    </td>
                                    <td>
                                        <p class="text-sm font-weight-bold mb-0"><%= transaction.type %></p>
                                    </td>
                                    <td class="align-middle text-center text-sm">
                                        <span class="badge badge-sm bg-gradient-<%= transaction.status === 1 ? 'success' : 'danger' %>">
                                            <%= transaction.status === 1 ? 'Active' : 'Inactive' %>
                                        </span>
                                    </td>
                                    <td class="align-middle text-center">
                                        <span class="text-secondary text-xs font-weight-bold"><%= transaction.createdDate %></span>
                                    </td>
                                    <!-- <td class="align-middle">
                                        <a href="javascript:;" class="text-secondary font-weight-bold text-xs" style="margin-right: 20px;" data-bs-toggle="modal" data-bs-target="#editOrderModal" onclick="storeModal('<%= transaction.transactionId %>', '<%= transaction.user.userName %>', '<%= transaction.amonut %>', '<%= transaction.type %>', '<%= transaction.status %>', '<%= transaction.createdDate %>')">
                                            Edit
                                        </a>
                                    </td> -->
                                </tr>
                            <% }) %>                        
                        </tbody>
                      </table>                    
                      <div id="nav_transaction" class="d-flex justify-content-center align-items-center mt-3">
                        <div class="arrow" id="prevPage_transaction">&lt;</div>
                        <select id="pageSelect_transaction" class="form-select mx-2" style="width: 100px;"></select>
                        <div class="arrow" id="nextPage_transaction">&gt;</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
  
            <%- include('../layouts/footer') %>
  
          </div>
        </main>
  
      <!-- Edit Store Modal -->
      
  
      <!-- JS Handle FUNCTION -->
      <script>
        const navTransaction = document.getElementById('nav_transaction');
        const tbodyTransaction = document.getElementById('transactionTableBody');
        let pageIndex = 0;
        let itemsPerPage = 16;

        const filterState = {
          username: null,
          createdDate: null
        };

        function applyFilters() {
          const username = document.getElementById('usernameInput').value;
          const createdDate = document.getElementById('createdDateInput').value;

          filterState.username = username;
          filterState.createdDate = createdDate;
          console.log('Filters applied:', filterState);
          pageIndex = 0;
          fetchTransactions(filterState);
        }

        async function fetchTransactions(filters = {}) {
          const validFilters = Object.fromEntries(
            Object.entries(filters).filter(([key, value]) => value !== undefined && value !== null && value !== '')
          );

          const queryParams = new URLSearchParams(validFilters).toString();

          try {
            const response = await fetch(`/transaction?${queryParams}`);
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }

            const data = await response.text();
            tbodyTransaction.innerHTML = '';

            const parser = new DOMParser();
            const doc = parser.parseFromString(data, 'text/html');

            const newTbody = doc.getElementById('transactionTableBody');
            if (newTbody) {
              const transactions = Array.from(newTbody.childNodes);
              const paginatedTransactions = transactions.slice(pageIndex * itemsPerPage, (pageIndex * itemsPerPage) + itemsPerPage);
              paginatedTransactions.forEach(order => {
                tbodyTransaction.appendChild(order);
              });

              loadPageNavOrder(transactions, navTransaction);
            } else {
              console.error('New tbody not found in fetched data');
            }
          } catch (error) {
            console.error('Error fetching transactions:', error);
          }
        }

        function loadPageNavOrder(transactions, navTransaction) {
          const prevPage = document.getElementById('prevPage_transaction');
          const nextPage = document.getElementById('nextPage_transaction');
          const pageSelect = document.getElementById('pageSelect_transaction');
          pageSelect.innerHTML = "";
          const totalItems = transactions.length;
          const totalPages = Math.ceil(totalItems / itemsPerPage);

          for (let i = 0; i < totalPages; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.innerHTML = `Page ${i + 1} `;
            pageSelect.appendChild(option);
          }

          pageSelect.value = pageIndex;

          pageSelect.addEventListener('change', (e) => {
            pageIndex = parseInt(e.target.value, 10);
            fetchTransactions(filterState);
          });

          prevPage.addEventListener('click', () => {
            if (pageIndex > 0) {
              pageIndex--;
              fetchTransactions(filterState);
              pageSelect.value = pageIndex;
            }
          });

          nextPage.addEventListener('click', () => {
            if (pageIndex < totalPages - 1) {
              pageIndex++;
              fetchTransactions(filterState);
              pageSelect.value = pageIndex;
            }
          });
        }

        function updateOrderActivePage(nav, pageIndex) {
          const spans = nav.querySelectorAll('span');
          spans.forEach((span, index) => {
            if (index === pageIndex) {
              span.classList.add('active');
            } else {
              span.classList.remove('active');
            }
          });
        }

        document.addEventListener('DOMContentLoaded', (event) => {
          fetchTransactions();
        });
      </script>
  
      <!--   Core JS Files   -->
      <%- include('../layouts/script') %>
  </body>
</html>