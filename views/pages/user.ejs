<!DOCTYPE html>
<html lang="en">
<head>
  
  <%- include('../layouts/head', { title: 'User | Nom Nom' }) %>

  <style>
    .dropdown-item.active {
      background-color: #007bff;
      color: white;
    }
    .align-middle .btn {
      padding: 0.25rem 1rem;
      font-size: 0.75rem; /* Adjust the font size as needed */
      margin-bottom: 0;
    }
    .card-body, .table-responsive{
      min-height: calc(5 * 60px);
    }
  </style>

</head>
<body class="g-sidenav-show   bg-gray-100">
  <div class="min-height-300 bg-primary position-absolute w-100"></div>
    
    <%- include('../partials/sidebar') %>
    
      <main class="main-content position-relative border-radius-lg ">

        <%- include('../partials/navbar') %>

        <div class="container-fluid py-4">
          <div class="row">
            <div class="col-12">
              <div class="card mb-4">
                <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                  <h6>Managers's table</h6>
                  <a href="javascript:;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addFormModal">
                    Add <i class="ni ni-fat-add fs-7"></i>
                  </a>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                  <div class="table-responsive p-0">
                    <table class="table align-items-center mb-0">
                      <thead>
                        <tr>
                          <th class="col-3 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">Name</th>
                          <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Phone</th>
                          <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Role</th>
                          <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2 d-none">Balance</th>
                          <th id="statusHeader" class="col-2 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">
                            <div class="dropdown">
                              <button class="btn btn-secondary dropdown-toggle" type="button" id="statusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Status
                              </button>
                              <ul class="dropdown-menu" aria-labelledby="statusDropdown">
                                <li><a class="dropdown-item active" href="#" onclick="toggleStatusFilterManager(null); return false;">All</a></li>
                                <li><a class="dropdown-item" href="#" onclick="toggleStatusFilterManager(1); return false;">Active</a></li>
                                <li><a class="dropdown-item" href="#" onclick="toggleStatusFilterManager(2); return false;">Inactive</a></li>
                              </ul>
                            </div>
                          </th>
                          <th id="campusHeader" class="col-2 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">
                            <div class="dropdown">
                              <button class="btn btn-secondary dropdown-toggle" type="button" id="campusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Campus
                              </button>
                              <ul class="dropdown-menu" aria-labelledby="campusDropdown">
                                <li><a class="dropdown-item active" href="#" onclick="filterByCampusManager(null); return false;">All</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterByCampusManager('Campus A'); return false;">Campus A</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterByCampusManager('Campus B'); return false;">Campus B</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterByCampusManager('Campus C'); return false;">Campus C</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterByCampusManager('Campus D'); return false;">Campus D</a></li>
                              </ul>
                            </div>
                          </th>
                          <th class="col-1 text-secondary opacity-7"></th>
                        </tr>
                      </thead>
                      <tbody id="userTableBody">
                      <% adminsAndShippers.forEach(user => { %>
                        <tr>
                          <td>
                            <div class="d-flex px-2 py-1">
                              <div>
                                <img src="<%= user.role === 1 ? './images/admin.png' : './images/shipper.png' %>" class="avatar me-3" alt="managers">
                              </div>
                              <div class="d-flex flex-column justify-content-center">
                                <h6 class="mb-0 text-sm"><%= user.name %></h6>
                                <p class="text-xs text-secondary mb-0"><%= user.email %></p>
                              </div>
                            </div>
                          </td>
                          <td>
                            <p class="text-xs font-weight-bold mb-0"><%= user.phone %></p>
                          </td>
                          <td>
                            <p class="text-xs font-weight-bold mb-0"><%= user.role === 1 ? 'Admin' : 'Shipper' %></p>
                          </td>
                          <td class="d-none">
                            <p class="text-sm font-weight-bold mb-0"><%= user.balance %></p>
                          </td>
                          <td class="align-middle text-center text-sm">
                            <span class="badge badge-sm bg-gradient-<%= user.status === 1 ? 'success' : 'danger' %>">
                                <%= user.status === 1 ? 'Active' : 'Inactive' %>
                            </span>
                          </td>
                          <td class="align-middle text-center">
                            <span class="text-secondary text-xs font-weight-bold"><%= user.campus %></span>
                          </td>
                          <td class="align-middle justify-content-center">
                            <a href="javascript:;" class="btn btn-sm btn-secondary btn-custom font-weight-bold text-xs" data-bs-toggle="modal" data-bs-target="#editUserModal" onclick="userModal('<%= user.userId %>', '<%= user.name %>', '<%= user.email %>', '<%= user.phone %>', '<%= user.role %>', '<%= user.balance %>', '<%= user.status %>')">
                                Edit
                            </a>
                          </td>
                        </tr>
                        <% }) %>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-12">
              <div class="card mb-4">
                <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                  <h6>Customers's table</h6>
                  <a href="javascript:;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addFormModal">
                    Add <i class="ni ni-fat-add fs-7"></i>
                  </a>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                  <div class="table-responsive p-0">
                    <table class="table align-items-center justify-content-center mb-0">
                      <thead>
                        <tr>
                          <th class="col-3 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">Name</th>
                          <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Phone</th>
                          <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2 d-none">Role</th>
                          <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Balance</th>
                          <th id="statusHeader" class="col-2 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">
                            <div class="dropdown">
                              <button class="btn btn-secondary dropdown-toggle" type="button" id="statusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Status
                              </button>
                              <ul class="dropdown-menu" aria-labelledby="statusDropdown">
                                <li><a class="dropdown-item active" href="#" onclick="toggleStatusFilter(null); return false;">All</a></li>
                                <li><a class="dropdown-item" href="#" onclick="toggleStatusFilter(1); return false;">Active</a></li>
                                <li><a class="dropdown-item" href="#" onclick="toggleStatusFilter(2); return false;">Inactive</a></li>
                              </ul>
                            </div>
                          </th>
                          <th id="campusHeader" class="col-2 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">
                            <div class="dropdown">
                              <button class="btn btn-secondary dropdown-toggle" type="button" id="campusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Campus
                              </button>
                              <ul class="dropdown-menu" aria-labelledby="campusDropdown">
                                <li><a class="dropdown-item active" href="#" onclick="filterByCampus(null); return false;">All</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterByCampus('Campus A'); return false;">Campus A</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterByCampus('Campus B'); return false;">Campus B</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterByCampus('Campus C'); return false;">Campus C</a></li>
                                <li><a class="dropdown-item" href="#" onclick="filterByCampus('Campus D'); return false;">Campus D</a></li>
                              </ul>
                            </div>
                          </th>
                          <th class="col-1 text-secondary opacity-7"></th>
                        </tr>
                      </thead>
                      <tbody id="customerTableBody">
                        <% customers.forEach(user => { %>
                          <tr>
                            <td>
                              <div class="d-flex px-2">
                                <div>
                                  <img src="./images/user.png" class="avatar rounded-circle me-2" alt="customers">
                                </div>
                                <div class="my-auto">
                                  <h6 class="mb-0 text-sm"><%= user.name %></h6>
                                  <p class="text-xs text-secondary mb-0"><%= user.email %></p>
                                </div>
                              </div>
                            </td>
                            <td>
                              <p class="text-sm font-weight-bold mb-0"><%= user.phone %></p>
                            </td>
                            <td class="d-none">
                              <p class="text-sm font-weight-bold mb-0"><%= user.role %></p>
                            </td>
                            <td>
                              <p class="text-sm font-weight-bold mb-0"><%= user.balance %></p>
                            </td>
                            <td class="align-middle text-center text-sm">
                              <span class="badge badge-sm bg-gradient-<%= user.status === 1 ? 'success' : 'danger' %>">
                                <%= user.status === 1 ? 'Active' : 'Inactive' %>
                              </span>
                            </td>
                            <td class="align-middle text-center">
                              <span class="text-secondary text-xs font-weight-bold"><%= user.campus %></span>
                            </td>
                            <td class="align-middle justify-content-center">
                              <a href="javascript:;" class="btn btn-sm btn-secondary btn-custom font-weight-bold text-xs" data-bs-toggle="modal" data-bs-target="#editUserModal" onclick="userModal('<%= user.userId %>', '<%= user.name %>', '<%= user.email %>', '<%= user.phone %>', '<%= user.role %>', '<%= user.balance %>', '<%= user.status %>')">
                                  Edit
                              </a>
                            </td>
                          </tr>
                        <% }) %>
                      </tbody>
                    </table>                                                                           
                  </div>
                </div>
              </div>
            </div>
          </div>

          <%- include('../layouts/footer') %>

        </div>
      </main>

    <div class="fixed-plugin">
        <a class="fixed-plugin-button text-dark position-fixed px-3 py-2">
          <i class="fa fa-cog py-2"> </i>
        </a>
        <div class="card shadow-lg">
          <div class="card-header pb-0 pt-3 ">
            <div class="float-start">
              <h5 class="mt-3 mb-0">Argon Configurator</h5>
              <p>See our dashboard options.</p>
            </div>
            <div class="float-end mt-4">
              <button class="btn btn-link text-dark p-0 fixed-plugin-close-button">
                <i class="fa fa-close"></i>
              </button>
            </div>
            <!-- End Toggle Button -->
          </div>
          <hr class="horizontal dark my-1">
          <div class="card-body pt-sm-3 pt-0 overflow-auto">
            <!-- Sidebar Backgrounds -->
            <div>
              <h6 class="mb-0">Sidebar Colors</h6>
            </div>
            <a href="javascript:void(0)" class="switch-trigger background-color">
              <div class="badge-colors my-2 text-start">
                <span class="badge filter bg-gradient-primary active" data-color="primary" onclick="sidebarColor(this)"></span>
                <span class="badge filter bg-gradient-dark" data-color="dark" onclick="sidebarColor(this)"></span>
                <span class="badge filter bg-gradient-info" data-color="info" onclick="sidebarColor(this)"></span>
                <span class="badge filter bg-gradient-success" data-color="success" onclick="sidebarColor(this)"></span>
                <span class="badge filter bg-gradient-warning" data-color="warning" onclick="sidebarColor(this)"></span>
                <span class="badge filter bg-gradient-danger" data-color="danger" onclick="sidebarColor(this)"></span>
              </div>
            </a>
            <!-- Sidenav Type -->
            <div class="mt-3">
              <h6 class="mb-0">Sidenav Type</h6>
              <p class="text-sm">Choose between 2 different sidenav types.</p>
            </div>
            <div class="d-flex">
              <button class="btn bg-gradient-primary w-100 px-3 mb-2 active me-2" data-class="bg-white" onclick="sidebarType(this)">White</button>
              <button class="btn bg-gradient-primary w-100 px-3 mb-2" data-class="bg-default" onclick="sidebarType(this)">Dark</button>
            </div>
            <p class="text-sm d-xl-none d-block mt-2">You can change the sidenav type just on desktop view.</p>
            <!-- Navbar Fixed -->
            <div class="d-flex my-3">
              <h6 class="mb-0">Navbar Fixed</h6>
              <div class="form-check form-switch ps-0 ms-auto my-auto">
                <input class="form-check-input mt-1 ms-auto" type="checkbox" id="navbarFixed" onclick="navbarFixed(this)">
              </div>
            </div>
            <hr class="horizontal dark my-sm-4">
            <div class="mt-2 mb-5 d-flex">
              <h6 class="mb-0">Light / Dark</h6>
              <div class="form-check form-switch ps-0 ms-auto my-auto">
                <input class="form-check-input mt-1 ms-auto" type="checkbox" id="dark-version" onclick="darkMode(this)">
              </div>
            </div>
          </div>
        </div>
    </div>

    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-bottom">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="editUserForm">
              <div class="mb-3">
                <label for="userId" class="form-label">User ID</label>
                <input type="text" class="form-control" id="userId" readonly>
              </div>
              <div class="mb-3">
                <label for="userName" class="form-label">Name</label>
                <input type="text" class="form-control" id="userName" required>
              </div>
              <div class="mb-3">
                <label for="userEmail" class="form-label">Email</label>
                <input type="email" class="form-control" id="userEmail" required>
              </div>
              <div class="mb-3">
                <label for="userPhone" class="form-label">Phone</label>
                <input type="text" class="form-control" id="userPhone" required>
              </div>
              <div class="mb-3" id="roleField">
                <label for="userRole" class="form-label">Role</label>
                <select class="form-select" id="userRole">
                  <option value="1">Admin</option>
                  <option value="2">Customer</option>
                  <option value="3">Shipper</option>
                </select>
              </div>
              <div class="mb-3" id="balanceField">
                  <label for="userBalance" class="form-label">Balance</label>
                  <input type="number" class="form-control" id="userBalance">
              </div>
              <div class="mb-3">
                <label for="userCampus" class="form-label">Campus</label>
                <select class="form-select" id="userCampus">
                  <% campuses.forEach((campus, index) => { %>
                    <option value="<%= campus.campusId %>"  <%= index === 0 ? 'selected' : '' %>><%= campus.name %></option>
                  <% }); %>
                </select>
              </div>           
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-danger" id="deleteUserBtn">Delete</button>
            <div class="ms-auto">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" id="updateUserBtn" class="btn btn-primary" form="editUserForm">Save changes</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Add User Modal -->
    <div class="modal fade" id="addFormModal" tabindex="-1" aria-labelledby="addFormModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-bottom">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addFormModalLabel">Add New User</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="addUserForm">
              <div class="mb-3">
                <label for="userName-add" class="form-label">UserName</label>
                <input type="text" class="form-control" id="userName-add" required>
              </div>
              <div class="mb-3">
                <label for="name-add" class="form-label">Name</label>
                <input type="text" class="form-control" id="name-add" required>
              </div>
              <div class="mb-3">
                <label for="userEmail-add" class="form-label">Email</label>
                <input type="email" class="form-control" id="userEmail-add" required>
              </div>
              <div class="mb-3">
                <label for="userPhone-add" class="form-label">Phone</label>
                <input type="text" class="form-control" id="userPhone-add" required>
              </div>
              <div class="mb-3" id="roleField">
                <label for="userRole-add" class="form-label">Role</label>
                <select class="form-select" id="userRole-add">
                  <option value="1">Admin</option>
                  <option value="2">Customer</option>
                  <option value="3">Shipper</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="userCampus-add class="form-label">Campus</label>
                <select class="form-select" id="userCampus-add">
                  <% campuses.forEach((campus, index) => { %>
                    <option value="<%= campus.campusId %>"  <%= index === 0 ? 'selected' : '' %>><%= campus.name %></option>
                  <% }); %>
                </select>
              </div>            
              <div class="mb-3">
                <label for="userPassword-add" class="form-label">Password</label>
                <input type="password" class="form-control" id="userPassword-add" required>
              </div>
              <div class="mb-3">
                <label for="userConfirmPassword-add" class="form-label">Confirm Password</label>
                <input type="password" class="form-control" id="userConfirmPassword-add" required>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" id="saveUserBtn" class="btn btn-primary" form="addUserForm">Add User</button>
          </div>
        </div>
      </div>
    </div>

    <!-- JS Handle FUNCTION -->
    <script>
      // Get selected user
      function userModal(id, name, email, phone, role, balance) {
        document.getElementById('userId').value = id;
        document.getElementById('userName').value = name;
        document.getElementById('userEmail').value = email;
        document.getElementById('userPhone').value = phone;
        document.getElementById('userRole').value = role;
        document.getElementById('userBalance').value = balance;
      }

      const filterState = {
        status: null,
        campusName: null
      };

      function toggleStatusFilterManager(status) {
        console.log('Toggling status filter:', status);
        filterState.status = status;
        fetchAdmins(filterState);
      }

      function toggleStatusFilter(status) {
        console.log('Toggling status filter:', status);
        filterState.status = status;
        fetchUsers(filterState);
      }

      function filterByCampusManager(campusName) {
        console.log('Filtering by campus:', campusName);
        filterState.campusName = campusName;
        fetchAdmins(filterState);
      }

      function filterByCampus(campusName) {
        console.log('Filtering by campus:', campusName);
        filterState.campusName = campusName;
        fetchUsers(filterState);
      }

      async function fetchAdmins(filters = {}) {
        const validFilters = Object.fromEntries(
          Object.entries(filters).filter(([key, value]) => value !== undefined && value !== null) 
        );

        const queryParams = new URLSearchParams(validFilters).toString();

        try {
          const response = await fetch(`/user?${queryParams}`);
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          const data = await response.text();

          const tbody = document.getElementById('userTableBody');
          tbody.innerHTML = '';

          const parser = new DOMParser();
          const doc = parser.parseFromString(data, 'text/html');

          const newTbody = doc.getElementById('userTableBody');
          if (newTbody) {
            // Append the content of newTbody to the existing tbody
            tbody.append(...newTbody.childNodes);
          } else {
            console.error('New tbody not found in fetched data');
          }
        } catch (error) {
          console.error('Error fetching users:', error);
        }
      }

      async function fetchUsers(filters = {}) {
        console.log('Fetching users with filters:', filters);
        const validFilters = Object.fromEntries(
          Object.entries(filters).filter(([key, value]) => value !== undefined && value !== null)
        );

        const queryParams = new URLSearchParams(validFilters).toString();

        try {
          const response = await fetch(`/user?${queryParams}`);
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          const data = await response.text();

          const tbody = document.getElementById('customerTableBody');
          tbody.innerHTML = '';

          // Parse the HTML string to create DOM nodes
          const parser = new DOMParser();
          const doc = parser.parseFromString(data, 'text/html');

          // Get the content of tbody from the parsed HTML
          const newTbody = doc.getElementById('customerTableBody');
          if (newTbody) {
            // Append the content of newTbody to the existing tbody
            tbody.append(...newTbody.childNodes);
          } else {
            console.error('New tbody not found in fetched data');
          }
        } catch (error) {
          console.error('Error fetching users:', error);
        }
      }

      function updateDropdownSelection(dropdownId, value) {
        const dropdownButton = document.getElementById(dropdownId);
        const dropdownItems = dropdownButton.nextElementSibling.querySelectorAll('.dropdown-item');

        dropdownItems.forEach(item => {
          item.classList.remove('active');
          const itemValueMatch = item.getAttribute('onclick').match(/\(([^)]+)\)/);
          if (itemValueMatch) {
            const itemValue = itemValueMatch[1].replace(/['"]+/g, '');
            if (itemValue === String(value) || (itemValue === 'null' && value === null)) {
              item.classList.add('active');
            }
          }
        });
      }
      
      document.addEventListener("DOMContentLoaded", function() {
        // Load initial data
        fetchUsers(filterState);

        // Add user
        document.getElementById('addUserForm').addEventListener('submit', async function(event) {        
          event.preventDefault();

          const userData = {
            userName: document.getElementById('userName-add').value,
            password: document.getElementById('userPassword-add').value,
            confirmPassword: document.getElementById('userConfirmPassword-add').value,
            email: document.getElementById('userEmail-add').value,
            name: document.getElementById('name-add').value,
            campusId: document.getElementById('userCampus-add').value,
            phone: document.getElementById('userPhone-add').value,
            role: parseInt(document.getElementById('userRole-add').value)
          };

          try {
            const response = await fetch('/addUser', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(userData)
            });

            if (response.ok) {
              const addResult = await response.json();
                if (addResult.isSuccess && addResult.data && addResult.data.isSuccess) {
                  alert('User added successfully!');
                  location.reload();
                } else {
                  alert('Failed to add user: ' + (addResult.data ? addResult.data.message : addResult.error));
                }
            } else {
              alert('Failed to connect to the server. Please try again later.');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('An error occurred: ' + error.message);
          }
        });

        // Update user
        document.getElementById('updateUserBtn').addEventListener('click', async function(event) {
          event.preventDefault();

          const userId = document.getElementById('userId').value;
          const userName = document.getElementById('userName').value;
          const userEmail = document.getElementById('userEmail').value;
          const userPhone = document.getElementById('userPhone').value;
          const userRole = document.getElementById('userRole').value;
          const userBalance = document.getElementById('userBalance').value;
          const userCampus = document.getElementById('userCampus').value;

          const userData = {
            name: userName,
            email: userEmail,
            phone: userPhone,
            role: userRole ? parseInt(userRole, 10) : null,
            balance: userBalance ? parseInt(userBalance, 10) : null,
            campusId: userCampus
          };

          try {
            const response = await fetch(`/updateUser?userId=${userId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(userData)
            });

            if (response.ok) {
              const updateResult = await response.json();
              if (updateResult.isSuccess && updateResult.data && updateResult.data.isSuccess) {
                alert('User updated successfully!');
                location.reload();
              } else {
                alert('Failed to update user: ' + (updateResult.data ? updateResult.data.message : updateResult.error));
              }
            } else {
              alert('Failed to connect to the server. Please try again later.');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('An error occurred: ' + error.message);
          }
        });
    
        // Delete user
        document.getElementById("deleteUserBtn").addEventListener("click", async function() {
          const userId = document.getElementById("userId").value;
    
          const response = await fetch('/deleteUser', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              userId: userId
            })
          });
    
          const deleteResult = await response.json();
          if (!deleteResult.error) {
            alert("User deleted successfully!");
            location.reload();
          } else {
            alert("Failed to delete user: " + deleteResult.error);
          }
        });
      });
    </script>

    <!--   Core JS Files   -->
    <script src="./js/core/popper.min.js"></script>
    <script src="./js/core/bootstrap.min.js"></script>
    <script src="./js/plugins/perfect-scrollbar.min.js"></script>
    <script src="./js/plugins/smooth-scrollbar.min.js"></script>
    <script>
        var win = navigator.platform.indexOf('Win') > -1;
        if (win && document.querySelector('#sidenav-scrollbar')) {
          var options = {
            damping: '0.5'
          }
          Scrollbar.init(document.querySelector('#sidenav-scrollbar'), options);
        }
    </script>
    <!-- Github buttons -->
    <script async defer src="https://buttons.github.io/buttons.js"></script>
    <!-- Control Center for Soft Dashboard: parallax effects, scripts for the example pages etc -->
    <script src="./js/argon-dashboard.min.js?v=2.0.4"></script>
  </body>
</html>