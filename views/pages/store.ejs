<!DOCTYPE html>
<html lang="en">
<head>

  <%- include('../layouts/head', { title: 'Store | Nom Nom' }) %>
  <style>
    .align-middle .btn {
      padding: 0.25rem 1rem;
      font-size: 0.75rem;
      margin-bottom: 0;
    }
    #nav_store {
      display: flex;
      justify-content: center;
      align-items: center;
    }
    #nav_store .arrow {
      width: 40px;
      height: 40px;
      line-height: 40px;
      background-color: #6a0dad;
      color: #fff;
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 5px;
      cursor: pointer;
    }
    #pageSelect_store {
      padding: 5px;
      font-size: 1rem;
      text-align: center;
    }
  </style>

</head>
<body class="g-sidenav-show bg-gray-100">
  <div class="min-height-300 bg-primary position-absolute w-100"></div>
    
    <%- include('../partials/sidebar') %>

      <main class="main-content position-relative border-radius-lg ">

        <%- include('../partials/navbar') %>

        <div class="container-fluid py-4">
          <div class="row">
            <div class="col-12">
              <div class="card mb-4">
                <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                  <h6>Store's table</h6>
                  <a href="javascript:;" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addFormModal">
                    Add <i class="ni ni-fat-add fs-7"></i>
                  </a>
                </div>
                <div class="card-body px-0 pt-0 pb-2">
                  <div class="table-responsive p-0">
                    <table class="table align-items-center mb-0">
                      <div class="row ps-4 align-items-center w-100">
                        <div class="col-2">
                          <label for="storeIdInputCustomer" class="form-label">StoreId</label>
                          <input type="text" id="storeIdInput" class="form-control" placeholder="Enter storeId">
                        </div>
                        <div class="col-2">
                          <label for="nameInputCustomer" class="form-label">Store Name</label>
                          <input type="text" id="nameInput" class="form-control" placeholder="Enter name">
                        </div>
                        <div class="col-2">
                          <label for="statusInput" class="form-label">Status</label>
                          <select id="statusInput" class="form-select">
                            <option value="">All</option>
                              <option value="1">Active</option>
                              <option value="2">Inactive</option>
                            </select>
                        </div>
                        <div class="col-2">
                          <label for="areaInput" class="form-label">Area</label>
                          <select id="areaInput" class="form-select">
                            <% areas.forEach((area, index) => { %>
                              <option value="<%= area.name %>"  <%= index === 0 ? 'selected' : '' %>><%= area.name %></option>
                            <% }); %>                            
                          </select>                          
                      </div>                    
                        <div class="col-2" style="margin: 45px 0 0 0 ; padding: 0;">
                          <button class="btn btn-primary w-100 " style="height: 40px;" onclick="applyFilters()">Apply Filters</button>
                        </div>
                      </div>  
                      <thead>
                        <tr>
                          <th class="col-3 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-7">Name</th>
                          <th class="col-2 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">Phone</th>
                          <th class="col-1 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">OpenTime</th>
                          <th class="col-1 text-uppercase text-secondary text-xxs font-weight-bolder opacity-10 ps-2">CloseTime</th>
                          <th class="col-2 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">Status</th>
                          <th class="col-2 text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-10">Area</th>
                          <th class="col-1 text-secondary opacity-7"></th>
                        </tr>
                      </thead>
                      <tbody id="storeTableBody">
                        <% stores.forEach(store => { %>
                          <tr class="custom" style="cursor: pointer;" onClick="window.location.href='/store/<%= store.storeId %>'">                            
                            <td>
                              <div class="d-flex px-2 py-1">
                                <div>
                                  <img src="./images/store.png" class="avatar me-3" alt="stores">
                                </div>
                                <div class="d-flex flex-column justify-content-center">
                                  <h6 class="mb-0 text-sm"><%= store.storeId %></h6>
                                  <p class="text-xs text-secondary mb-0"><%= store.name %> - <%= store.address %></p>
                                </div>
                              </div>
                            </td>
                            <td>
                              <p class="text-xs font-weight-bold mb-0"><%= store.phone %></p>
                            </td>
                            <td>
                              <p class="text-sm font-weight-bold mb-0"><%= store.openTime %></p>
                            </td>
                            <td>
                              <p class="text-sm font-weight-bold mb-0"><%= store.closeTime %></p>
                            </td>
                            <td class="align-middle text-center text-sm">
                              <span class="badge badge-sm bg-gradient-<%= store.status === 1 ? 'success' : 'danger' %>">
                                <%= store.status === 1 ? 'Active' : 'Inactive' %>
                              </span>
                            </td>
                            <td class="align-middle text-center">
                              <span class="text-secondary text-xs font-weight-bold"><%= store.areaName %></span>
                            </td>
                            <td class="align-middle justify-content-center">
                              <a href="javascript:;" class="btn btn-sm btn-secondary btn-custom font-weight-bold text-xs" style="margin-right: 20px;" data-bs-toggle="modal" data-bs-target="#editStoreModal" 
                                onclick="event.stopPropagation(); storeModal('<%= store.storeId %>', '<%= store.name %>', '<%= store.address %>', '<%= store.phone %>', '<%= store.openTime %>', '<%= store.closeTime %>', '<%= store.status %>')">
                                Edit
                              </a>
                            </td>
                          </tr>
                        <% }) %>
                      </tbody>                      
                    </table>
                    <div id="nav_store" class="d-flex justify-content-center align-items-center mt-3">
                      <div class="arrow" id="prevPage_store">&lt;</div>
                      <select id="pageSelect_store" class="form-select mx-2" style="width: 100px;"></select>
                      <div class="arrow" id="nextPage_store">&gt;</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <%- include('../layouts/footer') %>

        </div>
      </main>

    <!-- Add Store Modal -->
    <div class="modal fade" id="addFormModal" tabindex="-1" aria-labelledby="addFormModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-bottom">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addFormModalLabel">Add New Store</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="addStoreForm">
              <div class="mb-3">
                <label for="area-add" class="form-label">Area</label>
                <select class="form-select" id="area-add">
                  <% areas.forEach((area, index) => { %>
                    <% if (area.status == 1) { %>
                      <option value="<%= area.areaId %>" <%= index === 0 ? 'selected' : '' %>><%= area.name %></option>
                    <% } %>
                  <% }); %>
                </select>
              </div>
              <div class="mb-3">
                <label for="name-add" class="form-label">Name</label>
                <input type="text" class="form-control" id="name-add" required>
              </div>
              <div class="mb-3">
                <label for="address-add" class="form-label">Address</label>
                <input type="text" class="form-control" id="address-add" required>
              </div>
              <div class="mb-3">
                <label for="phone-add" class="form-label">Phone</label>
                <input type="text" class="form-control" id="phone-add" required>
              </div>  
              <div class="mb-3">
                <label for="openTime-add" class="form-label">OpenTime</label>
                <input type="time" class="form-control" id="openTime-add" required>
              </div>
              <div class="mb-3">
                <label for="closeTime-add" class="form-label">CloseTime</label>
                <input type="time" class="form-control" id="closeTime-add">
              </div>         
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" id="saveUserBtn" class="btn btn-primary" form="addStoreForm">Add Store</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Store Modal -->
    <div class="modal fade" id="editStoreModal" tabindex="-1" aria-labelledby="editStoreModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-bottom">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editStoreModalLabel">Edit Store</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="editStoreForm">
              <div class="mb-3">
                <label for="storeId" class="form-label">Store ID</label>
                <input type="text" class="form-control" id="storeId" readonly>
              </div>
              <div class="mb-3">
                <label for="storeName" class="form-label">Name</label>
                <input type="text" class="form-control" id="storeName" required>
              </div>
              <div class="mb-3">
                <label for="storeAddress" class="form-label">Address</label>
                <input type="text" class="form-control" id="storeAddress" required>
              </div>
              <div class="mb-3">
                <label for="storePhone" class="form-label">Phone</label>
                <input type="text" class="form-control" id="storePhone" required>
              </div>
              <div class="mb-3">
                <label for="storeOpenTime" class="form-label">OpenTime</label>
                <input type="time" class="form-control" id="storeOpenTime" required>
              </div>
              <div class="mb-3">
                <label for="storeCloseTime" class="form-label">CloseTime</label>
                <input type="time" class="form-control" id="storeCloseTime">
              </div>
              <div class="mb-3">
                <label for="storeStatus" class="form-label">Status</label>
                <select class="form-select" id="storeStatus">
                  <option value="1">Active</option>
                  <option value="2">Inactive</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="storeArea" class="form-label">Area</label>
                <select class="form-select" id="storeArea">
                  <% areas.forEach((area, index) => { %>
                    <% if (area.status == 1) { %>
                      <option value="<%= area.areaId %>" <%= index === 0 ? 'selected' : '' %>><%= area.name %></option>
                    <% } %>
                  <% }); %>
                </select>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-danger" id="deleteStoreBtn">Delete</button>
            <div class="ms-auto">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" id="updateStoreBtn" class="btn btn-primary" form="editStoreForm">Save changes</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- JS Handle FUNCTION -->
    <script>
      // Get selected store
      function storeModal(id, name, address, phone, openTime, closeTime, status) {
          document.getElementById('storeId').value = id;
          document.getElementById('storeName').value = name;
          document.getElementById('storeAddress').value = address;
          document.getElementById('storePhone').value = phone;
          document.getElementById('storeOpenTime').value = openTime;
          document.getElementById('storeCloseTime').value = closeTime;
          document.getElementById('storeStatus').value = status;
      }

      const filterState = {
        Name: null,
        StoreId: null,
        status: null,
        areaName: null
      };

      const navStore = document.getElementById('nav_store');
      const tbodyStore = document.getElementById('storeTableBody');
      let pageIndex = 0;
      let itemsPerPage = 16;
      let isLoading = false;

      function applyFilters() {
        const Name = document.getElementById('nameInput').value;
        const StoreId = document.getElementById('storeIdInput').value;
        const areaName = document.getElementById('areaInput').value;
        const status = document.getElementById('statusInput').value;
        filterState.Name = Name;
        filterState.StoreId = StoreId;
        filterState.status = status;
        filterState.areaName = areaName;
        console.log('Filters applied:', filterState);
        pageIndex = 0;
        fetchStores(filterState);
      }

      async function fetchStores(filters = {}) {
        if (isLoading) return;
        isLoading = true;

        const validFilters = Object.fromEntries(
          Object.entries(filters).filter(([key, value]) => value !== undefined && value !== null)
        );

        const queryParams = new URLSearchParams(validFilters).toString();

        try {
          const response = await fetch(`/store?${queryParams}`);
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          const data = await response.text();
          tbodyStore.innerHTML = '';

          const parser = new DOMParser();
          const doc = parser.parseFromString(data, 'text/html');

          const newTbody = doc.getElementById('storeTableBody');
          if (newTbody) {
            const stores = Array.from(newTbody.childNodes);
            const paginatedStores = stores.slice(pageIndex * itemsPerPage, (pageIndex * itemsPerPage) + itemsPerPage);
            
            paginatedStores.forEach(store => {
              tbodyStore.appendChild(store);
            });

            loadPageStore(stores, navStore);
          } else {
            console.error('New tbody not found in fetched data');
          }
        } catch (error) {
          console.error('Error fetching stores:', error);
        } finally {
          isLoading = false; // Mở khóa sau khi tải dữ liệu xong
        }
      }

      function loadPageStore(stores, navStore) {
        const prevPage = document.getElementById('prevPage_store');
        const nextPage = document.getElementById('nextPage_store');
        const pageSelect = document.getElementById('pageSelect_store');
        pageSelect.innerHTML = "";
        const totalItems = stores.length;
        const totalPages = Math.ceil(totalItems / itemsPerPage);

        for (let i = 0; i < totalPages; i++) {
          const option = document.createElement('option');
          option.value = i;
          option.innerHTML = `Page ${i + 1} `;
          pageSelect.appendChild(option);
        }

        pageSelect.value = pageIndex;

        pageSelect.addEventListener('change', (e) => {
          const selectedPageIndex = parseInt(e.target.value, 10);
          if (selectedPageIndex !== pageIndex) {
            pageIndex = selectedPageIndex;
            fetchStores(filterState);
          }
        });

        prevPage.addEventListener('click', () => {
          if (pageIndex > 0 && !isLoading) {
            pageIndex--;
            fetchStores(filterState);
            pageSelect.value = pageIndex;
          }
        });

        nextPage.addEventListener('click', () => {
          if (pageIndex < totalPages - 1 && !isLoading) {
            pageIndex++;
            fetchStores(filterState);
            pageSelect.value = pageIndex;
          }
        });
      }

      function updateActivePage(navStore, pageIndex) {
        const spans = nav.querySelectorAll('span');
        spans.forEach((span, index) => {
          if (index === pageIndex) {
            span.classList.add('active');
          } else {
            span.classList.remove('active');
          }
        });
      }

      document.addEventListener("DOMContentLoaded", function() {
        fetchStores();
        // Add store
        document.getElementById('addStoreForm').addEventListener('submit', async function(event) {        
          event.preventDefault();

          const storeData = {
            areaId: document.getElementById('area-add').value,
            name: document.getElementById('name-add').value,
            address: document.getElementById('address-add').value,
            phone: document.getElementById('phone-add').value,
            openTime: document.getElementById('openTime-add').value,
            closeTime: document.getElementById('closeTime-add').value,            
          };

          try {
            const response = await fetch('/store/addStore', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(storeData)
            });

            if (response.ok) {
              const addResult = await response.json();
                if (addResult.isSuccess && addResult.data && addResult.data.isSuccess) {
                  alert('Store added successfully!');
                  location.reload();
                } else {
                  alert('Failed to add store: ' + (addResult.data ? addResult.data.message : addResult.error));
                }
            } else {
              alert('Failed to connect to the server. Please try again later.');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('An error occurred: ' + error.message);
          }
        });

        // Update store
        document.getElementById('updateStoreBtn').addEventListener('click', async function(event) {
          event.preventDefault();

          const storeId = document.getElementById('storeId').value;
          const storeName = document.getElementById('storeName').value;
          const storeAddress = document.getElementById('storeAddress').value;
          const storePhone = document.getElementById('storePhone').value;
          const storeOpenTime = document.getElementById('storeOpenTime').value;
          const storeCloseTime = document.getElementById('storeCloseTime').value;
          const storeStatus = document.getElementById('storeStatus').value;
          const storeArea = document.getElementById('storeArea').value;

          const storeData = {
            name: storeName,
            address: storeAddress,
            phone: storePhone,
            openTime: storeOpenTime,
            closeTime: storeCloseTime,
            status: storeStatus ? parseInt(storeStatus, 10) : null,
            areaId: storeArea
          };

        try {
            const response = await fetch(`/store/updateStore?storeId=${storeId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
              body: JSON.stringify(storeData)
          });

        if (response.ok) {
            const updateResult = await response.json();
            if (updateResult.isSuccess) {
                alert('Store updated successfully!');
                location.reload();
            } else {
                alert('Failed to update store: ' + (updateResult.data ? updateResult.data.message : updateResult.error));
            }
        } else {
            alert('Failed to connect to the server. Please try again later.');
        }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred: ' + error.message);
            }
        });
      
        // Delete store
        document.getElementById("deleteStoreBtn").addEventListener("click", async function() {
          const storeId = document.getElementById("storeId").value;
    
          const response = await fetch('/store/deleteStore', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              storeId: storeId
            })
          });
    
          const deleteResult = await response.json();
          if (!deleteResult.error) {
            alert("Store deleted successfully!");
            location.reload();
          } else {
            alert("Failed to delete store: " + deleteResult.error);
          }
        });
      });
    </script>

    <!--   Core JS Files   -->
    <%- include('../layouts/script') %>
</body>
</html>